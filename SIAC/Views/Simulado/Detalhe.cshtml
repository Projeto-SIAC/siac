@model Simulado
@{
    ViewBag.Title = "Detalhe do Simulado";
    int? vagasSimulado = Model.QteVagas;
    int? capacidadeSelecionada = Model.SimSala.Sum(s => s.Sala.Capacidade);
    var responsavel = Model.Colaborador.MatrColaborador == Sessao.UsuarioMatricula;
}

<h2>
    @ViewBag.Title
    @if (Model.FlagSimuladoEncerrado)
    {
        <span data-title="Encerrado" data-content="Não se pode mais realizar nenhuma operação neste simulado." class="ui label"><i class="lock icon"></i>Encerrado</span>
    }
    else if (Model.FlagProvaEncerrada)
    {
        <span data-title="Provas Encerradas" data-content="Agora você pode inserir as respostas dos candidatos e calcular os escores finais de cada um." class="ui label"><i class="checkmark box icon"></i>Provas Encerradas</span>
    }
    else if (Model.FlagAguardaPrazoInscricao)
    {
        <span data-title="Aguardando Prazo de Inscrições" data-content="O simulado já foi completamente cadastrado. Agora tem que se aguardar o prazo de inscrição iniciar para os candidatos se cadastrarem" class="ui label"><i class="calendar icon"></i>Aguardando Prazo de Inscrições </span>
    }
    else if (Model.FlagInscricaoNaoLiberada)
    {
        <span data-title="Inscrições Não Liberadas" data-content="O prazo de inscrição está em vigor, mas é necessário que você libere as inscrições no Atalho de Gerenciamento" class="ui label"><i class="wait icon"></i>Inscrições Não Liberadas</span>
    }
    else if ((Model.FlagInscricaoEncerrado || Model.DtTerminoInscricao < DateTime.Now) && Model.SimCandidato.Count <= 0)
    {
        <span data-title="Inscrições Encerradas sem candidatos" data-content="Configure um novo para as inscrições dos candidatos" class="ui red label"><i class="calendar outline icon"></i>Inscrições Encerradas sem candidatos</span>
    }
    else if (Model.FlagInscricaoEncerrado || Model.DtTerminoInscricao < DateTime.Now)
    {
        <span data-title="Inscrições Encerradas" data-content="Aguarde o início do prazo das provas para voltar a gerenciar o simulado" class="ui label"><i class="remove user icon"></i>Inscrições Encerradas</span>
    }
    else if (Model.FlagInscricaoAberta)
    {
        <span data-title="Inscrições Abertas" data-content="Os candidatos já podem realizar a inscrições neste simulado" class="ui label"><i class="add user icon"></i>Inscrições Abertas</span>
    }
    else
    {
        <span data-title="Gerado" data-content="Configure os detalhes do simulado, como: Prazos, Salas, Provas..." class="ui label"><i class="certificate icon"></i>Gerado</span>
    }
    @if (!Model.FlagSimuladoEncerrado)
    {
        <div class="ui right floated floating acoes dropdown labeled icon button">
            <i class="dropdown icon"></i>
            <span class="text">Atalhos para Gerenciamento</span>
            <div class="menu">
                <div class="header">Administração</div>
                @if (responsavel)
                {
                    <div class="editar item">
                        <i class="edit icon"></i>
                        Atualizar Dados
                    </div>
                    if (!Model.FlagProvaEncerrada)
                    {
                        <a href="@Url.Action("Datas", new { codigo = Model.Codigo })" class="item">
                            <i class="wait icon"></i>
                            Gerenciar Datas
                        </a>
                        <a href="@Url.Action("Salas", new { codigo = Model.Codigo })" class="item">
                            <i class="marker icon"></i>
                            Selecionar Salas
                        </a>
                        <a href="@Url.Action("Provas", new { codigo = Model.Codigo })" class="item">
                            <i class="copy icon"></i>
                            Gerenciar Provas
                        </a>
                        if (Model.FlagInscricaoAberta)
                        {
                            <div class="alterar prazo item">
                                <i class="calendar icon"></i>
                                Alterar prazo
                            </div>
                        }
                    }
                }
                @if (Model.Provas.Count > 0 && !Model.FlagProvaEncerrada)
                {
                    <a href="@Url.Action("Imprimir", new { codigo = Model.Codigo })" class="item">
                        <i class="print icon"></i>
                        Imprimir Provas e Gabaritos
                    </a>
                }
                @if (Model.SimCandidato.Count > 0)
                {
                    <div class="divider"></div>
                    <div class="header">Candidatos</div>
                    if (responsavel)
                    {
                        <div class="email item">
                            <i class="mail icon"></i>
                            Enviar Email para Candidatos
                        </div>
                    }
                    <div class="candidatos item">
                        <i class="users icon"></i>
                        Listar Candidatos
                    </div>
                    if (Model.FlagProvaEncerrada)
                    {
                        <a href="@Url.Action("Respostas", new { codigo = Model.Codigo })" class="item">
                            <i class="edit icon"></i>
                            Inserir Respostas
                        </a>
                        <a href="@Url.Action("Pontuacoes", new { codigo = Model.Codigo })" class="item">
                            <i class="write icon"></i>
                            Inserir Pontuações
                        </a>
                        if (responsavel)
                        {
                            <div class="calcular resultados item">
                                <i class="calculator icon"></i>
                                Calcular Resultados
                            </div>
                        }
                    }
                }
                @if (responsavel)
                {
                    <div class="divider"></div>
                    <div class="header">Configuração</div>
                    <div class="ordem-desempate item">
                        <i class="sort numeric ascending icon"></i>
                        Gerenciar Ordem de Desempate
                    </div>
                    if (Model.FlagInscricaoEncerrado)
                    {
                        if (Model.DtTerminoInscricao >= DateTime.Now && Model.DtInicioInscricao <= DateTime.Now)
                        {
                            <div class="liberar item">
                                <i class="unlock alternate green icon"></i>
                                Liberar Inscrições
                            </div>
                        }
                        if (DateTime.Now > Model.DtInicioInscricao && Model.SimCandidato.Count > 0 && !Model.FlagProvaEncerrada)
                        {
                            <div class="mapear item">
                                <i class="building outline icon"></i>
                                Mapear Salas
                            </div>
                        }
                    }
                    else if (Model.DtInicioInscricao < DateTime.Now && Model.DtTerminoInscricao >= DateTime.Now)
                    {
                        <div class="bloquear item">
                            <i class="ban red icon"></i>
                            Bloquear Inscrições
                        </div>
                    }
                    if (!Model.FlagProvaEncerrada && Model.UltimoDiaRealizacao?.DtRealizacao < DateTime.Now)
                    {
                        <div class="finalizar provas item">
                            <i class="file red icon"></i>
                            Indicar provas encerradas
                        </div>
                    }
                    <div class="encerrar item">
                        <i class="warning sign red icon"></i>
                        Encerrar Simulado
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="ui classificacao right floated button" data-action="@Url.Action("Classificacao", new { codigo = Model.Codigo })">
            <i class="users icon"></i>
            Classificação
        </div>
    }
</h2>

<div data-action="@Url.Action("AtualizarOrdemDesempate", new { codigo = Model.Codigo })" class="ui ordem-desempate small modal">
    <i class="close icon"></i>
    <div class="header">
        Gerenciar Ordem de Desempate
    </div>
    <div class="content">
        <div class="ui divided list">
            @foreach (var item in Model.Provas.OrderBy(p => p.OrdemDesempate))
            {
                <div class="item" data-prova="@item.CodComposto">
                    <div class="right floated content">
                        <div data-opcao="cima" class="ui icon button"><i class="chevron up icon"></i></div>
                        <div data-opcao="baixo" class="ui icon button"><i class="chevron down icon"></i></div>
                    </div>
                    <div class="middle aligned content">
                        <b>@item.Titulo</b><br />
                        @(item.CodDiaRealizacao)º Dia de Realização
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="actions">
        <div class="ui cancel button">Fechar</div>
        <div class="ui approve button">Salvar</div>
    </div>
</div>

<div class="ui candidatos modal">
    <i class="close icon"></i>
    <div class="header">
        Candidatos Inscritos
    </div>
    <div class="content">
        <table class="ui striped table">
            <thead>
                <tr>
                    <th>Inscrição</th>
                    <th>Nome</th>
                    <th>CPF</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var candidato in Model.SimCandidato.OrderBy(c => c.NumInscricao))
                {
                    <tr>
                        <td>@candidato.NumInscricaoRepresentacao</td>
                        <td>@candidato.Candidato.Nome</td>
                        <td>@Formate.ParaCPF(candidato.Candidato.Cpf)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="actions">
        <div class="ui cancel button">Fechar</div>
    </div>
</div>

<form action="@Url.Action("EnviarEmail", new { codigo = Model.Codigo })" method="post" class="ui small email modal">
    <i class="close icon"></i>
    <div class="header">
        Enviar Email para Candidatos
    </div>
    <div class="content">
        <div class="ui form">
            <div class="field required">
                <label data-ajuda="Descreva no espaço abaixo a mensagem que deseja enviar">Insira uma mensagem</label>
                <textarea id="mensagemEmail" name="mensagemEmail" rows="5" placeholder="Mensagem" required></textarea>
            </div>
        </div>
    </div>
    <div class="actions">
        <button type="reset" class="ui cancel button">Cancelar</button>
        <button type="submit" class="ui button">Enviar</button>
    </div>
</form>

<form action="@Url.Action("Editar", new { codigo = Model.Codigo })" method="post" class="ui editar modal">
    <i class="close icon"></i>
    <div class="header">Atualizar dados do simulado</div>
    <div class="content">
        <div class="ui form">
            <div class="field required">
                <label data-ajuda="Forneça na caixa abaixo o título">Forneça o título</label>
                <input id="txtTitulo" name="txtTitulo" value="@Model.Titulo" maxlength="250" placeholder="Título" required />
            </div>
            <div class="field">
                <label data-ajuda="Descreva no espaço abaixo uma descrição para este simulado">Insira uma descrição</label>
                <textarea id="txtDescricao" name="txtDescricao" rows="5" placeholder="Descrição" required>@Model.Descricao</textarea>
            </div>
            <div class="field required">
                <label data-ajuda="Insira a quantidade de vagas para inscrições deste simulado">Insira a quantidade de vagas</label>
                <input type="number" id="txtQteVagas" name="txtQteVagas" value="@Model.QteVagas" placeholder="Quantidade de vagas" required />
            </div>
        </div>
    </div>
    <div class="actions">
        <div class="ui cancel button">Voltar</div>
        <button type="submit" class="ui green button">Editar</button>
    </div>
</form>

<div data-action="@Url.Action("Encerrar", new { codigo = Model.Codigo })" class="ui encerrar small modal">
    <i class="close icon"></i>
    <div class="header">
        Encerrar Simulado?
    </div>
    <div class="content">
        <div class="description">
            <p>Esta função encerrará o simulado e bloqueará a sua manutenção</p>
        </div>
    </div>
    <div class="actions">
        <div class="ui cancel button">Cancelar</div>
        <div class="ui red approve button">Encerrar Simulado</div>
    </div>
</div>

<div data-action="@Url.Action("AlterarPermissaoInscricao", new { codigo = Model.Codigo, acao="Liberar" })" class="ui liberar small modal">
    <i class="close icon"></i>
    <div class="header">
        Liberar Inscrições do Simulado?
    </div>
    <div class="content">
        <div class="description">
            <p>Esta função liberará a realização de incrições, caso hoje já esteja no período de inscrições</p>
        </div>
    </div>
    <div class="actions">
        <div class="ui cancel button">Cancelar</div>
        <div class="ui green approve button">Liberar Inscrições</div>
    </div>
</div>

<div data-action="@Url.Action("AlterarPermissaoInscricao", new { codigo = Model.Codigo, acao="Bloquear" })" class="ui bloquear small modal">
    <i class="close icon"></i>
    <div class="header">
        Bloquear Inscrições do Simulado?
    </div>
    <div class="content">
        <div class="description">
            <p>Esta função bloqueará a realização de incrições deste simulado</p>
        </div>
    </div>
    <div class="actions">
        <div class="ui cancel button">Cancelar</div>
        <div class="ui red approve button">Bloquear Inscrições</div>
    </div>
</div>

<form action="@Url.Action("AlterarPrazo", new { codigo = Model.Codigo })" method="post" class="ui alterar prazo small modal">
    <i class="close icon"></i>
    <div class="header">
        Expandir prazo das inscrições
    </div>
    <div class="content">
        <div class="ui form">
            <div class="two fields required">
                <div class="field">
                    <label>Data de início das inscrições</label>
                    <input value="@Model.DtInicioInscricao" data-mask="00/00/0000" readonly />
                </div>
                <div class="field">
                    <label>Data de término das inscrições</label>
                    <input value="@Model.DtTerminoInscricao" data-mask="00/00/0000" readonly />
                </div>
            </div>
            <div class="field required">
                <label>Nova data de término das inscrições</label>
                <input autocomplete="off" name="txtNovoPrazo" data-mask="00/00/0000" required />
            </div>
        </div>
    </div>
    <div class="actions">
        <div class="ui cancel button">Voltar</div>
        <button type="submit" class="ui green button">Expandir prazo</button>
    </div>
</form>

<div data-action="@Url.Action("MapearSalas", new { codigo = Model.Codigo })" class="ui mapear small modal">
    <i class="close icon"></i>
    <div class="header">
        Mapear Salas para os Candidatos?
    </div>
    <div class="content">
        <div class="description">
            <p>Esta função definirá os locais de prova dos candidatos baseando na ordem alfabética deles e na ordem de cadastro das salas.</p>
        </div>
    </div>
    <div class="actions">
        <div class="ui button">Cancelar</div>
        <div class="ui green approve button">Mapear Salas</div>
    </div>
</div>

<div class="ui sala candidato modal">
    @* Espaço para listagem de candidato por sala *@
</div>

<div data-action="@Url.Action("FinalizarProvas", new { codigo = Model.Codigo })" class="ui finalizar provas small modal">
    <i class="close icon"></i>
    <div class="header">
        Indicar o encerramento das provas?
    </div>
    <div class="content">
        <div class="description">
            <p>Esta função finalizará as provas, permitindo a inserção das respostas e divulgação final do resultado do simulado.</p>
        </div>
    </div>
    <div class="actions">
        <div class="ui cancel button">Cancelar</div>
        <div class="ui red approve button">Finalizar Provas</div>
    </div>
</div>

<div class="ui classificacao modal">
    @* Espaço para listagem da classificação dos candidatos *@
</div>

<div class="ui candidato resultado modal">
    @* Espaço detalhes do Candidato *@
</div>

<div data-action="@Url.Action("CalcularResultados", new { codigo = Model.Codigo })" class="ui calcular resultados small modal">
    <i class="close icon"></i>
    <div class="header">
        Calcular resultados finais do simulado?
    </div>
    <div class="content">
        <div class="description">
            <p>Esta função irá calcular os escores finais dos candidatos que tiveram suas repostas fornecidas.</p>
        </div>
    </div>
    <div class="actions">
        <div class="ui cancel button">Cancelar</div>
        <div class="ui red approve button">Calcular Resultados</div>
    </div>
</div>

<div class="ui basic segment">
    <div class="ui dividing header">
        Detalhes
    </div>
    <table class="ui striped table">
        <tbody>
            <tr>
                <td><b>Titulo</b></td>
                <td>@Model.Titulo</td>
            </tr>
            @if (!String.IsNullOrWhiteSpace(Model.Descricao))
            {
                <tr>
                    <td><b>Descrição</b></td>
                    <td>@Html.Raw(Model.Descricao.ToHtml("p"))</td>
                </tr>
            }
            <tr>
                <td><b>Coordenador</b></td>
                <td>@Model.Colaborador.Usuario.PessoaFisica.Nome</td>
            </tr>
            <tr>
                <td><b>Vagas</b></td>
                <td>@Model.QteVagas</td>
            </tr>
        </tbody>
    </table>
</div>

@if (Model.DtInicioInscricao != null)
{
    <div class="ui basic segment">
        <div class="ui dividing header">
            Prazos
        </div>
        <table class="ui striped table">
            <thead>
                <tr>
                    <th>Data de cadastro</th>
                    <th>Data de início das inscrições</th>
                    <th>Data de término das inscrições</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@Model.DtCadastro.ToString("dd/MM/yyyy' às 'HH'h'mm")</td>
                    <td>@Model.DtInicioInscricao.Value.ToString("dd/MM/yyyy' às 'HH'h'mm")</td>
                    <td>@Model.DtTerminoInscricao.Value.ToString("dd/MM/yyyy' às 'HH'h'mm")</td>
                </tr>
            </tbody>
        </table>
    </div>
}

@if (Model.SimDiaRealizacao.Count > 0)
{
    <div class="ui basic segment">
        <div class="ui dividing header">
            Dias e Provas
        </div>
        <div class="ui fluid accordion">
            @foreach (var dia in Model.SimDiaRealizacao.OrderBy(d => d.DtRealizacao))
            {
                <div class="title">
                    <i class="dropdown icon"></i>
                    <b>@dia.DtRealizacao.DiaRealizacaoRepresentacao()</b>
                </div>
                <div class="content">
                    <table class="ui striped table">
                        <thead>
                            <tr>
                                <th>Título</th>
                                <th>Disciplina</th>
                                <th>Prof. Responsável</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var prova in dia.SimProva)
                            {
                                <tr>
                                    <td>
                                        @prova.Titulo
                                        @if (prova.FlagRedacao)
                                        {
                                            <div class="ui small label">
                                                Redação
                                            </div>
                                        }
                                        <div class="ui small label">
                                            @prova.QteQuestoes Questões
                                        </div>
                                    </td>
                                    <td>@prova.Disciplina.Descricao</td>
                                    @if (prova.Professor != null)
                                    {
                                        <td>@prova.Professor.Usuario.PessoaFisica.PrimeiroNome (@prova.Professor.MatrProfessor)</td>
                                    }
                                    else
                                    {
                                        <td>Nâo Definido</td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
}

@if (Model.SimSala.Count > 0)
{
    <div class="ui basic segment" style="max-height:30em">
        <div class="ui dividing header">
            Salas Selecionadas
            <div class="ui label">Vagas do Simulado<span class="detail">@vagasSimulado</span></div>
            <div class="ui @(vagasSimulado > capacidadeSelecionada ? "red": "green") label">Capacidade Selecionada<span class="detail">@capacidadeSelecionada</span></div>
        </div>
        <table class="ui striped table">
            <thead>
                <tr>
                    <th>Campus</th>
                    <th>Bloco</th>
                    <th>Sala</th>
                    <th>Sigla</th>
                    <th>Capacidade</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var simSala in Model.SimSala)
                {
                    <tr>
                        <td data-content="@simSala.Sala.Bloco.Campus.PessoaJuridica.NomeFantasia">@simSala.Sala.Bloco.Campus.Sigla</td>
                        <td data-content="@simSala.Sala.Bloco.Descricao">@simSala.Sala.Bloco.Sigla</td>
                        <td>@simSala.Sala.Descricao</td>
                        <td>@simSala.Sala.Sigla</td>
                        <td>@simSala.Sala.Capacidade</td>
                        <td><div data-sala="@simSala.CodSala" data-action="@Url.Action("ListarCandidatoPorSala", new { codigo = Model.Codigo, codSala = simSala.CodSala })" class="ui icon button"><i class="search icon"></i></div></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<a class="ui button" href="@Url.Action("Index", "Gerencia")">Voltar para Gerência de Simulados</a>

@section Scripts {
    @Scripts.Render("~/bundles/js/simulado")
    <script>
        (function () {
            siac.Simulado.Detalhe.iniciar();
        })();
    </script>
}